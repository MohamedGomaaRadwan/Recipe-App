// Mocks generated by Mockito 5.4.2 from annotations
// in recipe_app/test/features/recipes/presentation/view_model/recipe_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/material.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:recipe_app/core/infrastructure/comon/app_usecase.dart' as _i6;
import 'package:recipe_app/core/infrastructure/models/base/failure_result.dart'
    as _i2;
import 'package:recipe_app/features/recipes/data/model/recipe_model.dart'
    as _i5;
import 'package:recipe_app/features/recipes/domain/usecase/recipe_usecase.dart'
    as _i3;
import 'package:recipe_app/ui/helper/navigation_service.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFailureResult_0 extends _i1.SmartFake implements _i2.FailureResult {
  _FakeFailureResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RecipeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipeUseCase extends _i1.Mock implements _i3.RecipeUseCase {
  MockRecipeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.RecipeModel>> execute(_i6.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [params],
        ),
        returnValue:
            _i4.Future<List<_i5.RecipeModel>>.value(<_i5.RecipeModel>[]),
      ) as _i4.Future<List<_i5.RecipeModel>>);
  @override
  _i2.FailureResult handleError(dynamic error) => (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [error],
        ),
        returnValue: _FakeFailureResult_0(
          this,
          Invocation.method(
            #handleError,
            [error],
          ),
        ),
      ) as _i2.FailureResult);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i7.NavigationService {
  MockNavigationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<dynamic> routeTo(
    String? route, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #routeTo,
          [route],
          {#arguments: arguments},
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  void pop<T>([T? result]) => super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void popUntil<T>(_i8.RoutePredicate? predicate) => super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<dynamic> replaceRoute(
    String? route, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceRoute,
          [route],
          {#arguments: arguments},
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> routeAndPopUntil(
    String? newRouteName,
    _i8.RoutePredicate? predicate, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #routeAndPopUntil,
          [
            newRouteName,
            predicate,
          ],
          {#arguments: arguments},
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
}
